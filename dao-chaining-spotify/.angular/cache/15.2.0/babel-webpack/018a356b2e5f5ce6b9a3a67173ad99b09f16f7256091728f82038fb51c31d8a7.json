{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { ContractService } from \"../../services/contract.service\";\nimport { select } from \"@ngrx/store\";\nimport { Subject } from \"rxjs\";\nimport * as fromUser from \"../../selectors/user.selectors\";\nimport { selectSongIdList } from \"../../selectors/song-list.selector\";\nimport * as fromOrganization from \"../../selectors/organization.selectors\";\nimport { takeUntil } from \"rxjs/operators\";\nimport { connectUser } from \"../../actions/user.actions\";\nimport { SongListComponent } from \"../../components/song-list/song-list.component\";\nimport { TRACKS } from \"../../components/song-list/tracks\";\nimport { createOrganization, getOrganization, donate, checkAdmin } from \"../../actions/organization.actions\";\nimport { first } from \"rxjs/operators\";\nlet HomeComponent = class HomeComponent {\n  constructor(store$, contractService, userService, songListAddtoCart) {\n    this.store$ = store$;\n    this.contractService = contractService;\n    this.userService = userService;\n    this.songListAddtoCart = songListAddtoCart;\n    this.unsubscribe$ = new Subject();\n    this.loading = false;\n    this.display$ = this.store$.pipe(select(fromUser.selectConnectionStatus));\n    this.selectedOrganization$ = this.store$.pipe(select(fromOrganization.selectOrganizationDetails));\n    this.isAdmin$ = this.store$.pipe(select(fromOrganization.selectAdminStatus));\n    this.songList$ = this.store$.pipe(select(selectSongIdList));\n  }\n  ngOnInit() {\n    // login\n    this.loading = true;\n    this.userService.getAll().pipe(first()).subscribe(users => {\n      this.loading = false;\n      this.users = users;\n    });\n    this.display$.pipe(takeUntil(this.unsubscribe$)).subscribe(res => {\n      this.connected = res;\n    });\n    this.selectedOrganization$.pipe(takeUntil(this.unsubscribe$)).subscribe(data => {\n      this.organizationDetails = data;\n    });\n    this.isAdmin$.pipe(takeUntil(this.unsubscribe$)).subscribe(boolean => {\n      this.isAdmin = boolean;\n    });\n    this.songList$.pipe(takeUntil(this.unsubscribe$)).subscribe(id => {\n      this.songId = id;\n    });\n    this.songSelected = TRACKS.find(x => x.id == this.songId);\n  }\n  onConnect() {\n    this.store$.dispatch(connectUser());\n  }\n  onCreate(form) {\n    const org = {\n      orgID: form.id,\n      payableWallet: form.walletAddress,\n      orgName: form.name,\n      tokenAddress: form.tokenAddress\n    };\n    this.store$.dispatch(createOrganization({\n      organization: org\n    }));\n  }\n  onGet(form) {\n    const orgID = form.id;\n    this.store$.dispatch(getOrganization({\n      id: orgID\n    }));\n    this.store$.dispatch(checkAdmin({\n      id: orgID\n    }));\n  }\n  onDonate(form) {\n    this.store$.dispatch(donate({\n      id: form.id,\n      amount: form.amount,\n      tip: form.tip\n    }));\n  }\n  onPause(data) {\n    console.log(data);\n    // TODO move to ngrx effect?\n    this.contractService.pauseOrganization(data.id, data.causeIds);\n  }\n  onUnpause(data) {\n    console.log(data);\n    // TODO move to ngrx effect?\n    this.contractService.unpauseOrganization(data.id, data.causeIds);\n  }\n  onAdd(data) {\n    console.log(data);\n    // incorporate uDonate isAdmin function?\n    // TODO move to ngrx effect?\n    this.contractService.addNewOrganizationAdmin(data.address, data.id);\n  }\n  onRemove(data) {\n    console.log(data);\n    // incorporate uDonate isAdmin function?\n    // TODO move to ngrx effect?\n    this.contractService.removeOrganizationAdmin(data.address, data.id);\n  }\n  getSong() {\n    return this.songSelected;\n  }\n  ngOnDestroy() {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n};\nHomeComponent = __decorate([Component({\n  selector: \"app-home\",\n  templateUrl: \"./home.component.html\",\n  styleUrls: [\"./home.component.scss\"],\n  providers: [ContractService, SongListComponent]\n})], HomeComponent);\nexport { HomeComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}