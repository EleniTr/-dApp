{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { Subject } from \"rxjs\";\nimport { chaining_spotify_address, chaining_spotify_abi } from \"../../abis.js\";\nimport * as i0 from \"@angular/core\";\nexport let ContractService = /*#__PURE__*/(() => {\n  class ContractService {\n    constructor() {\n      this.accountStatusSource = new Subject();\n      this.accountStatus$ = this.accountStatusSource.asObservable();\n      const providerOptions = {\n        walletconnect: {\n          package: WalletConnectProvider,\n          options: {\n            infuraId: \"INFURA_ID\" // required\n          }\n        }\n      };\n\n      this.web3Modal = new Web3Modal({\n        network: \"mainnet\",\n        cacheProvider: true,\n        providerOptions,\n        theme: {\n          background: \"rgb(39, 49, 56)\",\n          main: \"rgb(199, 199, 199)\",\n          secondary: \"rgb(136, 136, 136)\",\n          border: \"rgba(195, 195, 195, 0.14)\",\n          hover: \"rgb(16, 26, 32)\"\n        }\n      });\n    }\n    connectAccount() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.provider = yield this.web3Modal.connect(); // set provider\n        this.web3js = new Web3(this.provider); // create web3 instance\n        this.accounts = yield this.web3js.eth.getAccounts();\n        return this.accounts;\n      });\n    }\n    createOrganization(orgID, payableWallet, orgName, tokenAddress) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // --- temporarily re-initializating these for the effect file\n        this.provider = yield this.web3Modal.connect(); // set provider\n        this.web3js = new Web3(this.provider); // create web3 instance\n        this.accounts = yield this.web3js.eth.getAccounts();\n        this.uDonate = new this.web3js.eth.Contract(chaining_spotify_abi, chaining_spotify_address);\n        const create = yield this.uDonate.methods.createOrganization(orgID, payableWallet, orgName, tokenAddress).send({\n          from: this.accounts[0]\n        });\n        return create;\n      });\n    }\n    isOrganizationAdmin(orgID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // --- temporarily re-initializating these for the effect file\n        this.provider = yield this.web3Modal.connect(); // set provider\n        this.web3js = new Web3(this.provider); // create web3 instance\n        this.accounts = yield this.web3js.eth.getAccounts();\n        this.uDonate = new this.web3js.eth.Contract(chaining_spotify_abi, chaining_spotify_address);\n        const checkAdmin = yield this.uDonate.methods.isOrgAdmin(orgID, this.accounts[0]).call({\n          from: this.accounts[0]\n        });\n        console.log(checkAdmin);\n        return checkAdmin;\n      });\n    }\n    getOrganization(orgID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // --- temporarily re-initializating these for the effect file\n        this.provider = yield this.web3Modal.connect(); // set provider\n        this.web3js = new Web3(this.provider); // create web3 instance\n        this.accounts = yield this.web3js.eth.getAccounts();\n        this.uDonate = new this.web3js.eth.Contract(chaining_spotify_abi, chaining_spotify_address);\n        const org = yield this.uDonate.methods.getOrganization(orgID).call({\n          from: this.accounts[0]\n        });\n        const organization = org;\n        const walletAddress = organization[1];\n        const balence = yield this.web3js.eth.getBalance(walletAddress);\n        const orgWithBalence = {\n          id: organization[0],\n          payableWallet: organization[1],\n          paused: organization[2],\n          ended: organization[3],\n          causesIDs: organization[4],\n          balence: balence\n        };\n        console.log(orgWithBalence);\n        console.log(this.uDonate);\n        return orgWithBalence;\n      });\n    }\n    donate(id, amount, tip) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.provider = yield this.web3Modal.connect(); // set provider\n        this.web3js = new Web3(this.provider); // create web3 instance\n        this.accounts = yield this.web3js.eth.getAccounts();\n        this.uDonate = new this.web3js.eth.Contract(chaining_spotify_abi, chaining_spotify_address);\n        const updatedAmt = amount * 1e18;\n        const donate = yield this.uDonate.methods.donateETH(id, tip).send({\n          from: this.accounts[0],\n          value: updatedAmt\n        });\n        return donate;\n      });\n    }\n    pauseOrganization(id, causeIds) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.provider = yield this.web3Modal.connect(); // set provider\n        this.web3js = new Web3(this.provider); // create web3 instance\n        this.accounts = yield this.web3js.eth.getAccounts();\n        this.uDonate = new this.web3js.eth.Contract(chaining_spotify_abi, chaining_spotify_address);\n        const pause = yield this.uDonate.methods.pauseOrganization(id, causeIds).send({\n          from: this.accounts[0]\n        });\n        console.log(pause);\n        // -- call subscrube to event\n      });\n    }\n\n    unpauseOrganization(id, causeIds) {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.log(\"unpause\");\n        this.provider = yield this.web3Modal.connect(); // set provider\n        this.web3js = new Web3(this.provider); // create web3 instance\n        this.accounts = yield this.web3js.eth.getAccounts();\n        this.uDonate = new this.web3js.eth.Contract(chaining_spotify_abi, chaining_spotify_address);\n        const unpause = yield this.uDonate.methods.unpauseOrganization(id, causeIds).send({\n          from: this.accounts[0]\n        });\n        console.log(unpause);\n      });\n    }\n    addNewOrganizationAdmin(address, id) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.provider = yield this.web3Modal.connect(); // set provider\n        this.web3js = new Web3(this.provider); // create web3 instance\n        this.accounts = yield this.web3js.eth.getAccounts();\n        this.uDonate = new this.web3js.eth.Contract(chaining_spotify_abi, chaining_spotify_address);\n        const add = yield this.uDonate.methods.addAdmin(address, id).send({\n          from: this.accounts[0]\n        });\n        console.log(add);\n      });\n    }\n    removeOrganizationAdmin(address, id) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.provider = yield this.web3Modal.connect(); // set provider\n        this.web3js = new Web3(this.provider); // create web3 instance\n        this.accounts = yield this.web3js.eth.getAccounts();\n        this.uDonate = new this.web3js.eth.Contract(chaining_spotify_abi, chaining_spotify_address);\n        const remove = yield this.uDonate.methods.removeAdmin(address, id).send({\n          from: this.accounts[0]\n        });\n        console.log(remove);\n      });\n    }\n  }\n  ContractService.ɵfac = function ContractService_Factory(t) {\n    return new (t || ContractService)();\n  };\n  ContractService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ContractService,\n    factory: ContractService.ɵfac,\n    providedIn: \"root\"\n  });\n  return ContractService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}