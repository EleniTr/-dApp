{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { Validators } from \"@angular/forms\";\nlet LoginComponent = class LoginComponent {\n  constructor(\n  // private formBuilder: FormBuilder,\n  authenticationService, route, router, accountService, alertService, fb, toast) {\n    this.authenticationService = authenticationService;\n    this.route = route;\n    this.router = router;\n    this.accountService = accountService;\n    this.alertService = alertService;\n    this.fb = fb;\n    this.toast = toast;\n    // loginForm: FormGroup;\n    this.loginForm = this.fb.group({\n      email: [\"\", [Validators.required, Validators.email]],\n      password: [\"\", Validators.required]\n    });\n    this.loading = false;\n    this.submitted = false;\n  }\n  // ngOnInit() {\n  //   this.loginForm = this.formBuilder.group({\n  //     username: [\"\", Validators.required],\n  //     password: [\"\", Validators.required],\n  //   });\n  ngOnInit() {\n    // get return url from route parameters or default to '/'\n    this.returnUrl = this.route.snapshot.queryParams[\"returnUrl\"] || \"/\";\n  }\n  get email() {\n    return this.loginForm.get(\"email\");\n  }\n  get password() {\n    return this.loginForm.get(\"password\");\n  }\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.loginForm.controls;\n  }\n  // onSubmit() {\n  //   this.submitted = true;\n  //   // reset alerts on submit\n  //   this.alertService.clear();\n  //   // stop here if form is invalid\n  //   if (this.loginForm.invalid) {\n  //     return;\n  //   }\n  //   this.loading = true;\n  //   this.accountService\n  //     .login(this.f.username.value, this.f.password.value)\n  //     .pipe(first())\n  //     .subscribe(\n  //       (data) => {\n  //         this.router.navigate([this.returnUrl]);\n  //       },\n  //       (error) => {\n  //         this.alertService.error(error);\n  //         this.loading = false;\n  //       }\n  //     );\n  // }\n  submit() {\n    const {\n      email,\n      password\n    } = this.loginForm.value;\n    if (!this.loginForm.valid || !email || !password) {\n      return;\n    }\n    this.authenticationService.login(email, password).pipe(this.toast.observe({\n      success: 'Logged in successfully',\n      loading: 'Logging in...',\n      error: ({\n        message\n      }) => `There was an error: ${message} `\n    })).subscribe(() => {\n      this.router.navigate([this.returnUrl]);\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: \"app-login\",\n  templateUrl: \"./login.component.html\",\n  styleUrls: [\"./login.component.scss\"]\n})], LoginComponent);\nexport { LoginComponent };\nonSignUp();\n{\n  this.router.navigate([\"/signup\"]);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}