{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { map, switchMap } from 'rxjs/operators';\nimport * as OrganizationActions from '../actions/organization.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/contract.service\";\nexport let OrganizationEffects = /*#__PURE__*/(() => {\n  class OrganizationEffects {\n    constructor(actions$, contractService) {\n      this.actions$ = actions$;\n      this.contractService = contractService;\n      this.createOrganization$ = createEffect(() => this.actions$.pipe(ofType(OrganizationActions.createOrganization), switchMap(value => __awaiter(this, void 0, void 0, function* () {\n        return yield this.contractService.createOrganization(value.organization.orgID, value.organization.payableWallet, value.organization.orgName, value.organization.tokenAddress);\n      })), map(response => OrganizationActions.createOrganizationSuccess({\n        organization: response\n      }))));\n      this.getOrganization$ = createEffect(() => this.actions$.pipe(ofType(OrganizationActions.getOrganization), switchMap(value => __awaiter(this, void 0, void 0, function* () {\n        return yield this.contractService.getOrganization(value.id);\n      })), map(response => OrganizationActions.getOrganizationSuccess({\n        organization: response\n      }))));\n      this.checkOrgAdmin$ = createEffect(() => this.actions$.pipe(ofType(OrganizationActions.checkAdmin), switchMap(value => __awaiter(this, void 0, void 0, function* () {\n        return yield this.contractService.isOrganizationAdmin(value.id);\n      })), map(response => OrganizationActions.checkAdminSuccess({\n        boolean: response\n      }))));\n      this.donate$ = createEffect(() => this.actions$.pipe(ofType(OrganizationActions.donate), switchMap(value => __awaiter(this, void 0, void 0, function* () {\n        return yield this.contractService.donate(value.id, value.amount, value.tip);\n      })), map(response => OrganizationActions.donateSuccess({\n        res: response\n      }))\n      /*todo: update reducer*/));\n    }\n  }\n\n  OrganizationEffects.ɵfac = function OrganizationEffects_Factory(t) {\n    return new (t || OrganizationEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ContractService));\n  };\n  OrganizationEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrganizationEffects,\n    factory: OrganizationEffects.ɵfac\n  });\n  return OrganizationEffects;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}