{"ast":null,"code":"import * as i1 from '@angular/common';\nimport { isPlatformServer, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, Input, EventEmitter, Injector, Output, ViewChild, ViewChildren, PLATFORM_ID, Injectable, Inject, Optional, NgModule } from '@angular/core';\nimport * as i1$1 from '@ngneat/overview';\nimport { isTemplateRef, isComponent, DynamicViewModule } from '@ngneat/overview';\nimport { Subject, race, defer } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\nconst _c0 = [\"*\"];\nconst _c1 = function (a0, a1) {\n  return {\n    \"border-color\": a0,\n    \"border-right-color\": a1\n  };\n};\nfunction IndicatorComponent_div_0_div_4_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"\\n        \");\n    i0.ɵɵelement(2, \"hot-toast-error\", 2);\n    i0.ɵɵtext(3, \"\\n      \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"theme\", ctx_r2.theme);\n  }\n}\nfunction IndicatorComponent_div_0_div_4_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"\\n        \");\n    i0.ɵɵelement(2, \"hot-toast-checkmark\", 2);\n    i0.ɵɵtext(3, \"\\n      \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"theme\", ctx_r3.theme);\n  }\n}\nfunction IndicatorComponent_div_0_div_4_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"\\n        \");\n    i0.ɵɵelement(2, \"hot-toast-warning\", 2);\n    i0.ɵɵtext(3, \"\\n      \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"theme\", ctx_r4.theme);\n  }\n}\nfunction IndicatorComponent_div_0_div_4_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"\\n        \");\n    i0.ɵɵelement(2, \"hot-toast-info\", 2);\n    i0.ɵɵtext(3, \"\\n      \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"theme\", ctx_r5.theme);\n  }\n}\nfunction IndicatorComponent_div_0_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtext(1, \"\\n    \");\n    i0.ɵɵelementStart(2, \"div\", 5);\n    i0.ɵɵtext(3, \"\\n      \");\n    i0.ɵɵtemplate(4, IndicatorComponent_div_0_div_4_div_4_Template, 4, 1, \"div\", 6);\n    i0.ɵɵtext(5, \"\\n      \");\n    i0.ɵɵtemplate(6, IndicatorComponent_div_0_div_4_div_6_Template, 4, 1, \"div\", 6);\n    i0.ɵɵtext(7, \"\\n      \");\n    i0.ɵɵtemplate(8, IndicatorComponent_div_0_div_4_div_8_Template, 4, 1, \"div\", 6);\n    i0.ɵɵtext(9, \"\\n      \");\n    i0.ɵɵtemplate(10, IndicatorComponent_div_0_div_4_div_10_Template, 4, 1, \"div\", 6);\n    i0.ɵɵtext(11, \"\\n    \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(12, \"\\n  \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngSwitch\", ctx_r1.type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngSwitchCase\", \"error\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngSwitchCase\", \"success\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngSwitchCase\", \"warning\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngSwitchCase\", \"info\");\n  }\n}\nfunction IndicatorComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtext(1, \"\\n  \");\n    i0.ɵɵelement(2, \"hot-toast-loader\", 2);\n    i0.ɵɵtext(3, \"\\n  \");\n    i0.ɵɵtemplate(4, IndicatorComponent_div_0_div_4_Template, 13, 5, \"div\", 3);\n    i0.ɵɵtext(5, \"\\n\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"theme\", ctx_r0.theme);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.type !== \"loading\");\n  }\n}\nconst _c2 = [\"hotToastBarBase\"];\nfunction HotToastComponent_ng_container_7_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1, \"\\n          \");\n    i0.ɵɵelementStart(2, \"hot-toast-animated-icon\", 10);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \"\\n        \");\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"iconTheme\", ctx_r6.toast.iconTheme);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r6.toast.icon);\n  }\n}\nfunction HotToastComponent_ng_container_7_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n          \");\n    i0.ɵɵelementStart(1, \"div\");\n    i0.ɵɵtext(2, \"\\n            \");\n    i0.ɵɵelementContainer(3, 11);\n    i0.ɵɵtext(4, \"\\n          \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \"\\n        \");\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"dynamicView\", ctx_r8.toast.icon);\n  }\n}\nfunction HotToastComponent_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1, \"\\n        \");\n    i0.ɵɵtemplate(2, HotToastComponent_ng_container_7_ng_container_2_Template, 5, 2, \"ng-container\", 4);\n    i0.ɵɵtext(3, \"\\n        \");\n    i0.ɵɵtemplate(4, HotToastComponent_ng_container_7_ng_template_4_Template, 6, 1, \"ng-template\", null, 9, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtext(6, \"\\n      \");\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const _r7 = i0.ɵɵreference(5);\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.isIconString)(\"ngIfElse\", _r7);\n  }\n}\nfunction HotToastComponent_ng_template_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n        \");\n    i0.ɵɵelement(1, \"hot-toast-indicator\", 12);\n    i0.ɵɵtext(2, \"\\n      \");\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"theme\", ctx_r3.toast.iconTheme)(\"type\", ctx_r3.toast.type);\n  }\n}\nfunction HotToastComponent_ng_container_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction HotToastComponent_button_21_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function HotToastComponent_button_21_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.close());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", ctx_r5.toast.closeStyle);\n  }\n}\nfunction HotToastContainerComponent_hot_toast_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"hot-toast\", 3);\n    i0.ɵɵlistener(\"height\", function HotToastContainerComponent_hot_toast_4_Template_hot_toast_height_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const toast_r1 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.updateHeight($event, toast_r1));\n    })(\"beforeClosed\", function HotToastContainerComponent_hot_toast_4_Template_hot_toast_beforeClosed_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const toast_r1 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.beforeClosed(toast_r1));\n    })(\"afterClosed\", function HotToastContainerComponent_hot_toast_4_Template_hot_toast_afterClosed_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.afterClosed($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const toast_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"toast\", toast_r1)(\"offset\", ctx_r0.calculateOffset(toast_r1.id, toast_r1.position))(\"toastRef\", ctx_r0.toastRefs[i_r2]);\n  }\n}\nconst HOT_TOAST_DEFAULT_TIMEOUTS = {\n  blank: 4000,\n  error: 4000,\n  success: 4000,\n  loading: 30000,\n  warning: 4000,\n  info: 4000\n};\nconst EXIT_ANIMATION_DURATION = 800;\nconst ENTER_ANIMATION_DURATION = 350;\nconst HOT_TOAST_MARGIN = 8;\nclass HotToastRef {\n  constructor(toast) {\n    this.toast = toast;\n    /** Subject for notifying the user that the toast has been closed. */\n    this._onClosed = new Subject();\n  }\n  get data() {\n    return this.toast.data;\n  }\n  set dispose(value) {\n    this._dispose = value;\n  }\n  getToast() {\n    return this.toast;\n  }\n  /**Used for internal purpose\n   * Attach ToastRef to container\n   */\n  appendTo(container) {\n    const {\n      dispose,\n      updateMessage,\n      updateToast,\n      afterClosed\n    } = container.addToast(this);\n    this.dispose = dispose;\n    this.updateMessage = updateMessage;\n    this.updateToast = updateToast;\n    this.afterClosed = race(this._onClosed.asObservable(), afterClosed);\n    return this;\n  }\n  /**\n   * Closes the toast\n   *\n   * @param [closeData={ dismissedByAction: false }] -\n   * Make sure to pass { dismissedByAction: true } when closing from template\n   * @memberof HotToastRef\n   */\n  close(closeData = {\n    dismissedByAction: false\n  }) {\n    this._dispose();\n    this._onClosed.next({\n      dismissedByAction: closeData.dismissedByAction,\n      id: this.toast.id\n    });\n    this._onClosed.complete();\n  }\n}\nconst animate = (element, value) => {\n  element.style.animation = value;\n};\nlet AnimatedIconComponent = /*#__PURE__*/(() => {\n  class AnimatedIconComponent {}\n  AnimatedIconComponent.ɵfac = function AnimatedIconComponent_Factory(t) {\n    return new (t || AnimatedIconComponent)();\n  };\n  AnimatedIconComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: AnimatedIconComponent,\n    selectors: [[\"hot-toast-animated-icon\"]],\n    inputs: {\n      iconTheme: \"iconTheme\"\n    },\n    ngContentSelectors: _c0,\n    decls: 5,\n    vars: 2,\n    consts: [[1, \"hot-toast-animated-icon\"]],\n    template: function AnimatedIconComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtext(1, \"\\n  \");\n        i0.ɵɵprojection(2);\n        i0.ɵɵtext(3, \"\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(4, \"\\n\");\n      }\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"color\", ctx.iconTheme == null ? null : ctx.iconTheme.primary);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return AnimatedIconComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet CheckMarkComponent = /*#__PURE__*/(() => {\n  class CheckMarkComponent {}\n  CheckMarkComponent.ɵfac = function CheckMarkComponent_Factory(t) {\n    return new (t || CheckMarkComponent)();\n  };\n  CheckMarkComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CheckMarkComponent,\n    selectors: [[\"hot-toast-checkmark\"]],\n    inputs: {\n      theme: \"theme\"\n    },\n    decls: 2,\n    vars: 4,\n    consts: [[1, \"hot-toast-checkmark-icon\"]],\n    template: function CheckMarkComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n        i0.ɵɵtext(1, \"\\n\");\n      }\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"--check-primary\", ctx.theme == null ? null : ctx.theme.primary)(\"--check-secondary\", ctx.theme == null ? null : ctx.theme.secondary);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CheckMarkComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ErrorComponent = /*#__PURE__*/(() => {\n  class ErrorComponent {}\n  ErrorComponent.ɵfac = function ErrorComponent_Factory(t) {\n    return new (t || ErrorComponent)();\n  };\n  ErrorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ErrorComponent,\n    selectors: [[\"hot-toast-error\"]],\n    inputs: {\n      theme: \"theme\"\n    },\n    decls: 2,\n    vars: 4,\n    consts: [[1, \"hot-toast-error-icon\"]],\n    template: function ErrorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n        i0.ɵɵtext(1, \"\\n\");\n      }\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"--error-primary\", ctx.theme == null ? null : ctx.theme.primary)(\"--error-secondary\", ctx.theme == null ? null : ctx.theme.secondary);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return ErrorComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet LoaderComponent = /*#__PURE__*/(() => {\n  class LoaderComponent {}\n  LoaderComponent.ɵfac = function LoaderComponent_Factory(t) {\n    return new (t || LoaderComponent)();\n  };\n  LoaderComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: LoaderComponent,\n    selectors: [[\"hot-toast-loader\"]],\n    inputs: {\n      theme: \"theme\"\n    },\n    decls: 2,\n    vars: 4,\n    consts: [[1, \"hot-toast-loader-icon\", 3, \"ngStyle\"]],\n    template: function LoaderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n        i0.ɵɵtext(1, \"\\n\");\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction2(1, _c1, ctx.theme == null ? null : ctx.theme.primary, ctx.theme == null ? null : ctx.theme.secondary));\n      }\n    },\n    dependencies: [i1.NgStyle],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return LoaderComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet WarningComponent = /*#__PURE__*/(() => {\n  class WarningComponent {}\n  WarningComponent.ɵfac = function WarningComponent_Factory(t) {\n    return new (t || WarningComponent)();\n  };\n  WarningComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: WarningComponent,\n    selectors: [[\"hot-toast-warning\"]],\n    inputs: {\n      theme: \"theme\"\n    },\n    decls: 2,\n    vars: 4,\n    consts: [[1, \"hot-toast-warning-icon\"]],\n    template: function WarningComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n        i0.ɵɵtext(1, \"\\n\");\n      }\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"--warn-primary\", ctx.theme == null ? null : ctx.theme.primary)(\"--warn-secondary\", ctx.theme == null ? null : ctx.theme.secondary);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return WarningComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet InfoComponent = /*#__PURE__*/(() => {\n  class InfoComponent {}\n  InfoComponent.ɵfac = function InfoComponent_Factory(t) {\n    return new (t || InfoComponent)();\n  };\n  InfoComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: InfoComponent,\n    selectors: [[\"hot-toast-info\"]],\n    inputs: {\n      theme: \"theme\"\n    },\n    decls: 2,\n    vars: 4,\n    consts: [[1, \"hot-toast-info-icon\"]],\n    template: function InfoComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n        i0.ɵɵtext(1, \"\\n\");\n      }\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"--warn-primary\", ctx.theme == null ? null : ctx.theme.primary)(\"--warn-secondary\", ctx.theme == null ? null : ctx.theme.secondary);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return InfoComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IndicatorComponent = /*#__PURE__*/(() => {\n  class IndicatorComponent {}\n  IndicatorComponent.ɵfac = function IndicatorComponent_Factory(t) {\n    return new (t || IndicatorComponent)();\n  };\n  IndicatorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: IndicatorComponent,\n    selectors: [[\"hot-toast-indicator\"]],\n    inputs: {\n      theme: \"theme\",\n      type: \"type\"\n    },\n    decls: 2,\n    vars: 1,\n    consts: [[\"class\", \"hot-toast-indicator-wrapper\", 4, \"ngIf\"], [1, \"hot-toast-indicator-wrapper\"], [3, \"theme\"], [\"class\", \"hot-toast-status-wrapper\", 4, \"ngIf\"], [1, \"hot-toast-status-wrapper\"], [3, \"ngSwitch\"], [4, \"ngSwitchCase\"]],\n    template: function IndicatorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, IndicatorComponent_div_0_Template, 6, 2, \"div\", 0);\n        i0.ɵɵtext(1, \"\\n\");\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.type !== \"blank\");\n      }\n    },\n    dependencies: [i1.NgIf, i1.NgSwitch, i1.NgSwitchCase, CheckMarkComponent, ErrorComponent, LoaderComponent, WarningComponent, InfoComponent],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return IndicatorComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet HotToastComponent = /*#__PURE__*/(() => {\n  class HotToastComponent {\n    constructor(injector, renderer, ngZone) {\n      this.injector = injector;\n      this.renderer = renderer;\n      this.ngZone = ngZone;\n      this.offset = 0;\n      this.height = new EventEmitter();\n      this.beforeClosed = new EventEmitter();\n      this.afterClosed = new EventEmitter();\n      this.isManualClose = false;\n      this.unlisteners = [];\n    }\n    get containerPositionStyle() {\n      const top = this.toast.position.includes('top');\n      const verticalStyle = top ? {\n        top: 0\n      } : {\n        bottom: 0\n      };\n      const horizontalStyle = this.toast.position.includes('left') ? {\n        left: 0\n      } : this.toast.position.includes('right') ? {\n        right: 0\n      } : {\n        left: 0,\n        right: 0,\n        justifyContent: 'center'\n      };\n      return {\n        transform: `translateY(${this.offset * (top ? 1 : -1)}px)`,\n        ...verticalStyle,\n        ...horizontalStyle\n      };\n    }\n    get toastBarBaseStyles() {\n      const top = this.toast.position.includes('top');\n      const enterAnimation = `hotToastEnterAnimation${top ? 'Negative' : 'Positive'} ${ENTER_ANIMATION_DURATION}ms cubic-bezier(0.21, 1.02, 0.73, 1) forwards`;\n      const exitAnimation = `hotToastExitAnimation${top ? 'Negative' : 'Positive'} ${EXIT_ANIMATION_DURATION}ms forwards cubic-bezier(0.06, 0.71, 0.55, 1) ${this.toast.duration}ms`;\n      const animation = this.toast.autoClose ? `${enterAnimation}, ${exitAnimation}` : enterAnimation;\n      return {\n        ...this.toast.style,\n        animation\n      };\n    }\n    get isIconString() {\n      return typeof this.toast.icon === 'string';\n    }\n    ngOnInit() {\n      if (isTemplateRef(this.toast.message)) {\n        this.context = {\n          $implicit: this.toastRef\n        };\n      }\n      if (isComponent(this.toast.message)) {\n        this.toastComponentInjector = Injector.create({\n          providers: [{\n            provide: HotToastRef,\n            useValue: this.toastRef\n          }],\n          parent: this.toast.injector || this.injector\n        });\n      }\n    }\n    ngAfterViewInit() {\n      const nativeElement = this.toastBarBase.nativeElement;\n      // Caretaker note: accessing `offsetHeight` triggers the whole layout update.\n      // Macro tasks (like `setTimeout`) might be executed within the current rendering frame and cause a frame drop.\n      requestAnimationFrame(() => {\n        this.height.emit(nativeElement.offsetHeight);\n      });\n      // Caretaker note: `animationstart` and `animationend` events are event tasks that trigger change detection.\n      // We'd want to trigger the change detection only if it's an exit animation.\n      this.ngZone.runOutsideAngular(() => {\n        this.unlisteners.push(\n        // Caretaker note: we have to remove these event listeners at the end (even if the element is removed from DOM).\n        // zone.js stores its `ZoneTask`s within the `nativeElement[Zone.__symbol__('animationstart') + 'false']` property\n        // with callback that capture `this`.\n        this.renderer.listen(nativeElement, 'animationstart', event => {\n          if (this.isExitAnimation(event)) {\n            this.ngZone.run(() => this.beforeClosed.emit());\n          }\n        }), this.renderer.listen(nativeElement, 'animationend', event => {\n          if (this.isExitAnimation(event)) {\n            this.ngZone.run(() => this.afterClosed.emit({\n              dismissedByAction: this.isManualClose,\n              id: this.toast.id\n            }));\n          }\n        }));\n      });\n      this.setToastAttributes();\n    }\n    close() {\n      this.isManualClose = true;\n      const top = this.toast.position.includes('top');\n      const exitAnimation = `hotToastExitAnimation${top ? 'Negative' : 'Positive'} ${EXIT_ANIMATION_DURATION}ms forwards cubic-bezier(0.06, 0.71, 0.55, 1)`;\n      const nativeElement = this.toastBarBase.nativeElement;\n      animate(nativeElement, exitAnimation);\n    }\n    ngOnDestroy() {\n      this.close();\n      while (this.unlisteners.length) {\n        this.unlisteners.pop()();\n      }\n    }\n    isExitAnimation(ev) {\n      return ev.animationName.includes('hotToastExitAnimation');\n    }\n    setToastAttributes() {\n      const toastAttributes = this.toast.attributes;\n      for (const [key, value] of Object.entries(toastAttributes)) {\n        this.renderer.setAttribute(this.toastBarBase.nativeElement, key, value);\n      }\n    }\n  }\n  HotToastComponent.ɵfac = function HotToastComponent_Factory(t) {\n    return new (t || HotToastComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  HotToastComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: HotToastComponent,\n    selectors: [[\"hot-toast\"]],\n    viewQuery: function HotToastComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c2, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.toastBarBase = _t.first);\n      }\n    },\n    inputs: {\n      toast: \"toast\",\n      offset: \"offset\",\n      defaultConfig: \"defaultConfig\",\n      toastRef: \"toastRef\"\n    },\n    outputs: {\n      height: \"height\",\n      beforeClosed: \"beforeClosed\",\n      afterClosed: \"afterClosed\"\n    },\n    decls: 25,\n    vars: 14,\n    consts: [[1, \"hot-toast-bar-base-container\", 3, \"ngStyle\", \"ngClass\"], [1, \"hot-toast-bar-base\", 3, \"ngStyle\", \"ngClass\"], [\"hotToastBarBase\", \"\"], [\"aria-hidden\", \"true\", 1, \"hot-toast-icon\"], [4, \"ngIf\", \"ngIfElse\"], [\"indicator\", \"\"], [1, \"hot-toast-message\"], [4, \"dynamicView\", \"dynamicViewContext\", \"dynamicViewInjector\"], [\"type\", \"button\", \"class\", \"hot-toast-close-btn\", \"aria-label\", \"Close\", 3, \"ngStyle\", \"click\", 4, \"ngIf\"], [\"iconTemplateOrComponent\", \"\"], [3, \"iconTheme\"], [3, \"dynamicView\"], [3, \"theme\", \"type\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"hot-toast-close-btn\", 3, \"ngStyle\", \"click\"]],\n    template: function HotToastComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtext(1, \"\\n  \");\n        i0.ɵɵelementStart(2, \"div\", 1, 2);\n        i0.ɵɵtext(4, \"\\n    \");\n        i0.ɵɵelementStart(5, \"div\", 3);\n        i0.ɵɵtext(6, \"\\n      \");\n        i0.ɵɵtemplate(7, HotToastComponent_ng_container_7_Template, 7, 2, \"ng-container\", 4);\n        i0.ɵɵtext(8, \"\\n\\n      \");\n        i0.ɵɵtemplate(9, HotToastComponent_ng_template_9_Template, 3, 2, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtext(11, \"\\n    \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(12, \"\\n\\n    \");\n        i0.ɵɵelementStart(13, \"div\", 6);\n        i0.ɵɵtext(14, \"\\n      \");\n        i0.ɵɵelementStart(15, \"div\");\n        i0.ɵɵtext(16, \"\\n        \");\n        i0.ɵɵtemplate(17, HotToastComponent_ng_container_17_Template, 1, 0, \"ng-container\", 7);\n        i0.ɵɵtext(18, \"\\n      \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(19, \"\\n    \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(20, \"\\n\\n    \");\n        i0.ɵɵtemplate(21, HotToastComponent_button_21_Template, 1, 1, \"button\", 8);\n        i0.ɵɵtext(22, \"\\n  \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(23, \"\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(24, \"\\n\");\n      }\n      if (rf & 2) {\n        const _r2 = i0.ɵɵreference(10);\n        i0.ɵɵproperty(\"ngStyle\", ctx.containerPositionStyle)(\"ngClass\", \"hot-toast-theme-\" + ctx.toast.theme);\n        i0.ɵɵadvance(2);\n        i0.ɵɵstyleProp(\"--hot-toast-animation-state\", ctx.isManualClose ? \"running\" : \"paused\");\n        i0.ɵɵproperty(\"ngStyle\", ctx.toastBarBaseStyles)(\"ngClass\", ctx.toast.className);\n        i0.ɵɵattribute(\"aria-live\", ctx.toast.ariaLive)(\"role\", ctx.toast.role);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.toast.icon !== undefined)(\"ngIfElse\", _r2);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"dynamicView\", ctx.toast.message)(\"dynamicViewContext\", ctx.context)(\"dynamicViewInjector\", ctx.toastComponentInjector);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.toast.dismissible);\n      }\n    },\n    dependencies: [i1.NgClass, i1.NgIf, i1.NgStyle, i1$1.DynamicViewDirective, AnimatedIconComponent, IndicatorComponent],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return HotToastComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet HotToastContainerComponent = /*#__PURE__*/(() => {\n  class HotToastContainerComponent {\n    constructor(cdr) {\n      this.cdr = cdr;\n      this.toasts = [];\n      this.toastRefs = [];\n      /** Subject for notifying the user that the toast has been closed. */\n      this._onClosed = new Subject();\n      this.onClosed$ = this._onClosed.asObservable();\n    }\n    trackById(index, toast) {\n      return toast.id;\n    }\n    calculateOffset(toastId, position) {\n      const visibleToasts = this.toasts.filter(t => t.visible && t.position === position);\n      const index = visibleToasts.findIndex(toast => toast.id === toastId);\n      const offset = index !== -1 ? visibleToasts.slice(...(this.defaultConfig.reverseOrder ? [index + 1] : [0, index])).reduce((acc, t) => acc + (t.height || 0) + HOT_TOAST_MARGIN, 0) : 0;\n      return offset;\n    }\n    updateHeight(height, toast) {\n      toast.height = height;\n      this.cdr.detectChanges();\n    }\n    addToast(ref) {\n      this.toastRefs.push(ref);\n      const toast = ref.getToast();\n      this.toasts.push(ref.getToast());\n      this.cdr.detectChanges();\n      return {\n        dispose: () => {\n          this.closeToast(toast.id);\n        },\n        updateMessage: message => {\n          toast.message = message;\n          this.cdr.detectChanges();\n        },\n        updateToast: options => {\n          this.updateToasts(toast, options);\n          this.cdr.detectChanges();\n        },\n        afterClosed: this.getAfterClosed(toast)\n      };\n    }\n    closeToast(id) {\n      if (id) {\n        const comp = this.hotToastComponentList.find(item => item.toast.id === id);\n        if (comp) {\n          comp.close();\n        }\n      } else {\n        this.hotToastComponentList.forEach(comp => comp.close());\n      }\n    }\n    beforeClosed(toast) {\n      toast.visible = false;\n    }\n    afterClosed(closeToast) {\n      const toastIndex = this.toasts.findIndex(t => t.id === closeToast.id);\n      if (toastIndex > -1) {\n        this._onClosed.next(closeToast);\n        this.toasts = this.toasts.filter(t => t.id !== closeToast.id);\n        this.toastRefs = this.toastRefs.filter(t => t.getToast().id !== closeToast.id);\n        this.cdr.detectChanges();\n      }\n    }\n    hasToast(id) {\n      return this.toasts.findIndex(t => t.id === id) > -1;\n    }\n    getAfterClosed(toast) {\n      return this.onClosed$.pipe(filter(v => v.id === toast.id));\n    }\n    updateToasts(toast, options) {\n      this.toasts = this.toasts.map(t => ({\n        ...t,\n        ...(t.id === toast.id && {\n          ...toast,\n          ...options\n        })\n      }));\n    }\n  }\n  HotToastContainerComponent.ɵfac = function HotToastContainerComponent_Factory(t) {\n    return new (t || HotToastContainerComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  HotToastContainerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: HotToastContainerComponent,\n    selectors: [[\"hot-toast-container\"]],\n    viewQuery: function HotToastContainerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(HotToastComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.hotToastComponentList = _t);\n      }\n    },\n    inputs: {\n      defaultConfig: \"defaultConfig\"\n    },\n    decls: 8,\n    vars: 2,\n    consts: [[2, \"position\", \"fixed\", \"z-index\", \"9999\", \"top\", \"0\", \"right\", \"0\", \"bottom\", \"0\", \"left\", \"0\", \"pointer-events\", \"none\"], [2, \"position\", \"relative\", \"height\", \"100%\"], [3, \"toast\", \"offset\", \"toastRef\", \"height\", \"beforeClosed\", \"afterClosed\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"toast\", \"offset\", \"toastRef\", \"height\", \"beforeClosed\", \"afterClosed\"]],\n    template: function HotToastContainerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtext(1, \"\\n  \");\n        i0.ɵɵelementStart(2, \"div\", 1);\n        i0.ɵɵtext(3, \"\\n    \");\n        i0.ɵɵtemplate(4, HotToastContainerComponent_hot_toast_4_Template, 1, 3, \"hot-toast\", 2);\n        i0.ɵɵtext(5, \"\\n  \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(6, \"\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(7, \"\\n\");\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.toasts)(\"ngForTrackBy\", ctx.trackById);\n      }\n    },\n    dependencies: [i1.NgForOf, HotToastComponent],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return HotToastContainerComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass ToastConfig {\n  constructor() {\n    /**\n     * Sets the reverse order for hot-toast stacking\n     *\n     * @default false\n     */\n    this.reverseOrder = false;\n    this.ariaLive = 'polite';\n    this.role = 'status';\n    this.position = 'top-center';\n    this.autoClose = true;\n    this.theme = 'toast';\n    this.attributes = {};\n    // key in ToastType\n    this.info = {\n      content: ''\n    };\n    this.success = {\n      content: ''\n    };\n    this.error = {\n      content: ''\n    };\n    this.loading = {\n      content: ''\n    };\n    this.blank = {\n      content: ''\n    };\n    this.warning = {\n      content: ''\n    };\n  }\n}\nconst isFunction = valOrFunction => typeof valOrFunction === 'function';\nconst resolveValueOrFunction = (valOrFunction, arg) => isFunction(valOrFunction) ? valOrFunction(arg) : valOrFunction;\nclass ToastPersistConfig {\n  constructor() {\n    /**\n     *In which storage id vs. counts should be stored\n     *\n     * @type {('local' | 'session')}\n     * @memberof ToastPersistConfig\n     * @default 'local'\n     */\n    this.storage = 'local';\n    /**\n     *The key pattern to store object in storage. `${id}` in pattern is replaced with actual toast id.\n     *\n     * @type {('local' | 'session')}\n     * @memberof ToastPersistConfig\n     * @default 'ngneat/hottoast-${id}'\n     */\n    this.key = 'ngneat/hototast-${id}';\n    /**\n     *The number of toasts allowed to show.\n     *\n     * @memberof ToastPersistConfig\n     * @default 1\n     */\n    this.count = 1;\n    this.enabled = false;\n  }\n}\nlet HotToastService = /*#__PURE__*/(() => {\n  class HotToastService {\n    constructor(_viewService, platformId, config) {\n      this._viewService = _viewService;\n      this.platformId = platformId;\n      this._isInitialized = false;\n      this._defaultConfig = new ToastConfig();\n      this._defaultPersistConfig = new ToastPersistConfig();\n      if (config) {\n        this._defaultConfig = {\n          ...this._defaultConfig,\n          ...config\n        };\n      }\n    }\n    get defaultConfig() {\n      return this._defaultConfig;\n    }\n    set defaultConfig(config) {\n      this._defaultConfig = {\n        ...this._defaultConfig,\n        ...config\n      };\n      if (this._componentRef) {\n        this._componentRef.setInput('defaultConfig', this._defaultConfig);\n      }\n    }\n    /**\n     * Opens up an hot-toast without any pre-configurations\n     *\n     * @param message The message to show in the hot-toast.\n     * @param [options] Additional configuration options for the hot-toast.\n     * @returns\n     * @memberof HotToastService\n     */\n    show(message, options) {\n      const toast = this.createToast(message || this._defaultConfig.blank.content, 'blank', {\n        ...this._defaultConfig,\n        ...options\n      });\n      return toast;\n    }\n    /**\n     * Opens up an hot-toast with pre-configurations for error state\n     *\n     * @param message The message to show in the hot-toast.\n     * @param [options] Additional configuration options for the hot-toast.\n     * @returns\n     * @memberof HotToastService\n     */\n    error(message, options) {\n      const toast = this.createToast(message || this._defaultConfig.error.content, 'error', {\n        ...this._defaultConfig,\n        ...this._defaultConfig?.error,\n        ...options\n      });\n      return toast;\n    }\n    /**\n     * Opens up an hot-toast with pre-configurations for success state\n     *\n     * @param message The message to show in the hot-toast.\n     * @param [options] Additional configuration options for the hot-toast.\n     * @returns\n     * @memberof HotToastService\n     */\n    success(message, options) {\n      const toast = this.createToast(message || this._defaultConfig.success.content, 'success', {\n        ...this._defaultConfig,\n        ...this._defaultConfig?.success,\n        ...options\n      });\n      return toast;\n    }\n    /**\n     * Opens up an hot-toast with pre-configurations for loading state\n     *\n     * @param message The message to show in the hot-toast.\n     * @param [options] Additional configuration options for the hot-toast.\n     * @returns\n     * @memberof HotToastService\n     */\n    loading(message, options) {\n      const toast = this.createToast(message || this._defaultConfig.loading.content, 'loading', {\n        ...this._defaultConfig,\n        ...this._defaultConfig?.loading,\n        ...options\n      });\n      return toast;\n    }\n    /**\n     * Opens up an hot-toast with pre-configurations for warning state\n     *\n     * @param message The message to show in the hot-toast.\n     * @param [options] Additional configuration options for the hot-toast.\n     * @returns\n     * @memberof HotToastService\n     */\n    warning(message, options) {\n      const toast = this.createToast(message || this._defaultConfig.warning.content, 'warning', {\n        ...this._defaultConfig,\n        ...this._defaultConfig?.warning,\n        ...options\n      });\n      return toast;\n    }\n    /**\n     * Opens up an hot-toast with pre-configurations for info state\n     *\n     * @param message The message to show in the hot-toast.\n     * @param [options] Additional configuration options for the hot-toast.\n     * @returns\n     * @memberof HotToastService\n     * @since 3.3.0\n     */\n    info(message, options) {\n      const toast = this.createToast(message || this._defaultConfig.info.content, 'info', {\n        ...this._defaultConfig,\n        ...this._defaultConfig?.info,\n        ...options\n      });\n      return toast;\n    }\n    /**\n     *\n     *  Opens up an hot-toast with pre-configurations for loading initially and then changes state based on messages\n     *\n     * @template T Type of observable\n     * @param messages Messages for each state i.e. loading, success and error\n     * @returns\n     * @memberof HotToastService\n     */\n    observe(messages) {\n      return source => {\n        let toastRef;\n        let start = 0;\n        const loadingContent = messages.loading ?? this._defaultConfig.loading?.content;\n        const successContent = messages.success ?? this._defaultConfig.success?.content;\n        const errorContent = messages.error ?? this._defaultConfig.error?.content;\n        return defer(() => {\n          if (loadingContent) {\n            toastRef = this.createLoadingToast(loadingContent);\n            start = Date.now();\n          }\n          return source.pipe(tap({\n            ...(successContent && {\n              next: val => {\n                toastRef = this.createOrUpdateToast(messages, val, toastRef, 'success', start === 0 ? start : Date.now() - start);\n              }\n            }),\n            ...(errorContent && {\n              error: e => {\n                toastRef = this.createOrUpdateToast(messages, e, toastRef, 'error', start === 0 ? start : Date.now() - start);\n              }\n            })\n          }));\n        });\n      };\n    }\n    /**\n     * Closes the hot-toast\n     *\n     * @param [id] - ID of the toast\n     * @since 3.0.1 - If ID is not provided, all toasts will be closed\n     */\n    close(id) {\n      if (this._componentRef) {\n        this._componentRef.ref.instance.closeToast(id);\n      }\n    }\n    /**\n     * Used for internal purpose only.\n     * Creates a container component and attaches it to document.body.\n     */\n    init() {\n      if (isPlatformServer(this.platformId)) {\n        return;\n      }\n      this._componentRef = this._viewService.createComponent(HotToastContainerComponent).setInput('defaultConfig', this._defaultConfig).appendTo(document.body);\n    }\n    createOrUpdateToast(messages, val, toastRef, type, diff) {\n      let content = null;\n      let options = {};\n      ({\n        content,\n        options\n      } = this.getContentAndOptions(type, messages[type] || (this._defaultConfig[type] ? this._defaultConfig[type].content : '')));\n      content = resolveValueOrFunction(content, val);\n      if (toastRef) {\n        toastRef.updateMessage(content);\n        const updatedOptions = {\n          type,\n          duration: diff + HOT_TOAST_DEFAULT_TIMEOUTS[type],\n          ...options,\n          ...(options.duration && {\n            duration: diff + options.duration\n          })\n        };\n        toastRef.updateToast(updatedOptions);\n      } else {\n        this.createToast(content, type, options);\n      }\n      return toastRef;\n    }\n    createToast(message, type, options, observableMessages) {\n      if (!this._isInitialized) {\n        this._isInitialized = true;\n        this.init();\n      }\n      const now = Date.now();\n      const id = options?.id ?? now.toString();\n      if (!this.isDuplicate(id) && (!options.persist?.enabled || options.persist?.enabled && this.handleStorageValue(id, options))) {\n        const toast = {\n          ariaLive: options?.ariaLive ?? 'polite',\n          createdAt: now,\n          duration: options?.duration ?? HOT_TOAST_DEFAULT_TIMEOUTS[type],\n          id,\n          message,\n          role: options?.role ?? 'status',\n          type,\n          visible: true,\n          observableMessages: observableMessages ?? undefined,\n          ...options\n        };\n        return new HotToastRef(toast).appendTo(this._componentRef.ref.instance);\n      }\n    }\n    /**\n     * Checks whether any toast with same id is present.\n     *\n     * @private\n     * @param id - Toast ID\n     */\n    isDuplicate(id) {\n      return this._componentRef.ref.instance.hasToast(id);\n    }\n    /**\n     * Creates an entry in local or session storage with count ${defaultConfig.persist.count}, if not present.\n     * If present in storage, reduces the count\n     * and returns the count.\n     * Count can not be less than 0.\n     */\n    handleStorageValue(id, options) {\n      let count = 1;\n      const persist = {\n        ...this._defaultPersistConfig,\n        ...options.persist\n      };\n      const storage = persist.storage === 'local' ? localStorage : sessionStorage;\n      const key = persist.key.replace(/\\${id}/g, id);\n      let item = storage.getItem(key);\n      if (item) {\n        item = parseInt(item, 10);\n        if (item > 0) {\n          count = item - 1;\n        } else {\n          count = item;\n        }\n      } else {\n        count = persist.count;\n      }\n      storage.setItem(key, count.toString());\n      return count;\n    }\n    getContentAndOptions(toastType, message) {\n      let content;\n      let options = {\n        ...this._defaultConfig,\n        ...this._defaultConfig[toastType]\n      };\n      // typeof message === 'object' won't work, cz TemplateRef's type is object\n      if (typeof message === 'string' || isTemplateRef(message) || isComponent(message)) {\n        content = message;\n      } else {\n        let restOptions;\n        ({\n          content,\n          ...restOptions\n        } = message);\n        options = {\n          ...options,\n          ...restOptions\n        };\n      }\n      return {\n        content,\n        options\n      };\n    }\n    createLoadingToast(messages) {\n      let content = null;\n      let options = {};\n      ({\n        content,\n        options\n      } = this.getContentAndOptions('loading', messages));\n      return this.loading(content, options);\n    }\n  }\n  HotToastService.ɵfac = function HotToastService_Factory(t) {\n    return new (t || HotToastService)(i0.ɵɵinject(i1$1.ViewService), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(ToastConfig, 8));\n  };\n  HotToastService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: HotToastService,\n    factory: HotToastService.ɵfac,\n    providedIn: 'root'\n  });\n  return HotToastService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet HotToastModule = /*#__PURE__*/(() => {\n  class HotToastModule {\n    static forRoot(config) {\n      return {\n        ngModule: HotToastModule,\n        providers: [{\n          provide: ToastConfig,\n          useValue: config\n        }]\n      };\n    }\n  }\n  HotToastModule.ɵfac = function HotToastModule_Factory(t) {\n    return new (t || HotToastModule)();\n  };\n  HotToastModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: HotToastModule\n  });\n  HotToastModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, DynamicViewModule]\n  });\n  return HotToastModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of hot-toast\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HotToastModule, HotToastRef, HotToastService, ToastConfig, ToastPersistConfig, resolveValueOrFunction };\n//# sourceMappingURL=ngneat-hot-toast.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}