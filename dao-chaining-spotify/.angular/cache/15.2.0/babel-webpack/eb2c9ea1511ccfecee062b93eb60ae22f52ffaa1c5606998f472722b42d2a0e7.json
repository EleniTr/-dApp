{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/trach/DAO/dao-chaining-spotify/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst pify = require('pify');\nconst BaseBlockTracker = require('./base');\nconst sec = 1000;\nclass PollingBlockTracker extends BaseBlockTracker {\n  constructor(opts = {}) {\n    // parse + validate args\n    if (!opts.provider) throw new Error('PollingBlockTracker - no provider specified.');\n    const pollingInterval = opts.pollingInterval || 20 * sec;\n    const retryTimeout = opts.retryTimeout || pollingInterval / 10;\n    const keepEventLoopActive = opts.keepEventLoopActive !== undefined ? opts.keepEventLoopActive : true;\n    const setSkipCacheFlag = opts.setSkipCacheFlag || false;\n    // BaseBlockTracker constructor\n    super(Object.assign({\n      blockResetDuration: pollingInterval\n    }, opts));\n    // config\n    this._provider = opts.provider;\n    this._pollingInterval = pollingInterval;\n    this._retryTimeout = retryTimeout;\n    this._keepEventLoopActive = keepEventLoopActive;\n    this._setSkipCacheFlag = setSkipCacheFlag;\n  }\n\n  //\n  // public\n  //\n\n  // trigger block polling\n  checkForLatestBlock() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this._updateLatestBlock();\n      return yield _this.getLatestBlock();\n    })();\n  }\n\n  //\n  // private\n  //\n\n  _start() {\n    this._performSync().catch(err => this.emit('error', err));\n  }\n  _performSync() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      while (_this2._isRunning) {\n        try {\n          yield _this2._updateLatestBlock();\n          yield timeout(_this2._pollingInterval, !_this2._keepEventLoopActive);\n        } catch (err) {\n          const newErr = new Error(`PollingBlockTracker - encountered an error while attempting to update latest block:\\n${err.stack}`);\n          try {\n            _this2.emit('error', newErr);\n          } catch (emitErr) {\n            console.error(newErr);\n          }\n          yield timeout(_this2._retryTimeout, !_this2._keepEventLoopActive);\n        }\n      }\n    })();\n  }\n  _updateLatestBlock() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      // fetch + set latest block\n      const latestBlock = yield _this3._fetchLatestBlock();\n      _this3._newPotentialLatest(latestBlock);\n    })();\n  }\n  _fetchLatestBlock() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const req = {\n        jsonrpc: \"2.0\",\n        id: 1,\n        method: 'eth_blockNumber',\n        params: []\n      };\n      if (_this4._setSkipCacheFlag) req.skipCache = true;\n      const res = yield pify(cb => _this4._provider.sendAsync(req, cb))();\n      if (res.error) throw new Error(`PollingBlockTracker - encountered error fetching block:\\n${res.error}`);\n      return res.result;\n    })();\n  }\n}\nmodule.exports = PollingBlockTracker;\nfunction timeout(duration, unref) {\n  return new Promise(resolve => {\n    const timoutRef = setTimeout(resolve, duration);\n    // don't keep process open\n    if (timoutRef.unref && unref) {\n      timoutRef.unref();\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}